// ------------  Paquete e importaciones ------------
package codigo ;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String PARENTESIS_A, PARENTESIS_C, PUNTOYCOMA;
terminal String POR, MAS;
terminal String R_MOSTRAR;
terminal String ENTERO;

//verdadera gramática
terminal String R_PROGRAM, R_ENDPROGRAM;
terminal String R_VAR_DOUBLE, R_VAR_CHAR, ASIGNACION, FIN_DECLARACION;
terminal String CADENA, DECIMAL, IDENTIFICADOR;


//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion, mostrar;
non terminal lista_instr;
non terminal expresion;
non terminal declaracion, asignacion;

//------> PRECEDENCIA
precedence left MAS;
precedence left POR;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= R_PROGRAM lista_instr R_ENDPROGRAM
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::= mostrar
    | declaracion
    | asignacion
;

mostrar ::= R_MOSTRAR PARENTESIS_A expresion:val PARENTESIS_C PUNTOYCOMA   {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.mostrar(val.toString()); :}
;

expresion ::= expresion:a MAS expresion:b       {: RESULT = (Double)a + (Double)b; :}
    | expresion:a POR expresion:b               {: RESULT = (Double)a * (Double)b; :}
    | ENTERO:val                                {: RESULT = Double.parseDouble(val.toString()); :}
    | DECIMAL:val                               {: RESULT = Double.parseDouble(val.toString()); :}
    | CADENA:val                                {: RESULT = val.toString(); :}
    | IDENTIFICADOR:val                         {: RESULT = func.Funcion.obtenerValor(val.toString()); :}
;


declaracion ::= R_VAR_DOUBLE IDENTIFICADOR ASIGNACION expresion:val FIN_DECLARACION
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararDouble(val.toString()); :}
    | R_VAR_CHAR IDENTIFICADOR ASIGNACION CADENA:val FIN_DECLARACION
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararCadena(val.toString()); :}
;

asignacion ::= IDENTIFICADOR:nombreVariable ASIGNACION expresion:valor FIN_DECLARACION
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.asignarValor(nombreVariable.toString(), valor.toString()); :}
;