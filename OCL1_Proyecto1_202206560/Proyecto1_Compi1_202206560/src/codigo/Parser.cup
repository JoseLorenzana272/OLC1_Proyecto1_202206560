// ------------  Paquete e importaciones ------------
package codigo ;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String PARENTESIS_A, PARENTESIS_C, PUNTOYCOMA;
terminal String POR, MAS;
terminal String R_MOSTRAR;
terminal String ENTERO;

//verdadera gramática
terminal String R_PROGRAM, R_ENDPROGRAM;
terminal String R_VAR_DOUBLE, R_VAR_CHAR, ASIGNACION;
terminal String CADENA, DECIMAL, IDENTIFICADOR, COLLON, DOUBLE_COLLON, COMMA;

//VARIABLES
terminal String R_VAR, R_DOUBLE, R_CHAR, FIN_DECLARACION;

terminal String R_ARR_DOUBLE, R_ARR_CHAR;
terminal String LISTA_VALORES, IDENTIFICADOR_ARREGLO;
terminal String R_SUM, R_RES, R_MUL, R_DIV, R_MOD;
terminal String R_MEDIA, R_MEDIANA, R_MODA, R_VARIANZA, R_MAX, R_MIN;
terminal String R_CONSOLE, R_PRINT, IGUAL, R_COLUMN, FLECHA;
terminal String GRAPHBAR, TITULO, EJEX, EJEY, TITULOX, TITULOY, EXEC_GRAPHBAR;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion, mostrar;
non terminal lista_instr;
non terminal expresion;
non terminal declaracion, asignacion;
non terminal declaracion_arreglo;
non terminal suma, resta, multi, division, modulo;
non terminal media, mediana, moda, varianza, max, min;
non terminal estadistica;
non terminal console_print, lista_expresiones, console_column, exp_string;
non terminal graficacion;

//------> PRECEDENCIA
precedence left MAS;
precedence left POR;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= R_PROGRAM lista_instr R_ENDPROGRAM
;

lista_instr ::= lista_instr instruccion
    | instruccion
;

instruccion ::= mostrar
    | declaracion
    | asignacion
    | declaracion_arreglo
    | console_print
    | console_column
    | graficacion
;

mostrar ::= R_MOSTRAR PARENTESIS_A expresion:val PARENTESIS_C PUNTOYCOMA   {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.mostrar(val.toString()); :}
;

expresion ::= expresion:a MAS expresion:b       {: RESULT = (Double)a + (Double)b; :}
    | expresion:a POR expresion:b               {: RESULT = (Double)a * (Double)b; :}
    | ENTERO:val                                {: RESULT = Double.parseDouble(val.toString()); :}
    | DECIMAL:val                               {: RESULT = Double.parseDouble(val.toString()); :}
    | CADENA:val                                {: RESULT = val.toString(); :}
    | IDENTIFICADOR:val                         {: RESULT = func.Funcion.obtenerValor(val.toString()); :}
    | IDENTIFICADOR_ARREGLO:val                 {: RESULT = func.Funcion.obtenerValor(val.toString()); :}
    | suma:val                                  {: RESULT = val; :}
    | resta:val                                 {: RESULT = val; :}
    | multi:val                                 {: RESULT = val; :}
    | division:val                              {: RESULT = val; :}
    | modulo:val                                {: RESULT = val; :}
    | estadistica: val                                {: RESULT = val; :}
;

exp_string ::= CADENA:val                                {: RESULT = val.toString(); :}
| IDENTIFICADOR:val                         {: RESULT = func.Funcion.obtenerValor(val.toString()); :}
;

suma ::= R_SUM PARENTESIS_A expresion:a COMMA expresion:b PARENTESIS_C
    {: RESULT = func.Funcion.sumar(a.toString(), b.toString()); :}
;

resta ::= R_RES PARENTESIS_A expresion:a COMMA expresion:b PARENTESIS_C
    {: RESULT = func.Funcion.restar(a.toString(), b.toString()); :}
;

multi ::= R_MUL PARENTESIS_A expresion:a COMMA expresion:b PARENTESIS_C
    {: RESULT = func.Funcion.multiplicar(a.toString(), b.toString()); :}
;

division ::= R_DIV PARENTESIS_A expresion:a COMMA expresion:b PARENTESIS_C
    {: RESULT = func.Funcion.dividir(a.toString(), b.toString()); :}
;

modulo ::= R_MOD PARENTESIS_A expresion:a COMMA expresion:b PARENTESIS_C
    {: RESULT = func.Funcion.modular(a.toString(), b.toString()); :}
;



//VARIABLES
declaracion ::= R_VAR COLLON R_DOUBLE DOUBLE_COLLON IDENTIFICADOR:nombreVariable ASIGNACION expresion:val FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararDouble(nombreVariable.toString(), val.toString()); :}
    | R_VAR COLLON R_CHAR DOUBLE_COLLON IDENTIFICADOR:nombreVariable ASIGNACION CADENA:val FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararCadena(nombreVariable.toString(), val.toString()); :}
;

asignacion ::= IDENTIFICADOR:nombreVariable ASIGNACION expresion:valor FIN_DECLARACION
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.asignarValor(nombreVariable.toString(), valor.toString()); :}
;

//ARREGLO LISTA
declaracion_arreglo ::= R_ARR_DOUBLE IDENTIFICADOR_ARREGLO:nombreArreglo ASIGNACION LISTA_VALORES:val FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloDouble(nombreArreglo.toString(), val.toString()); :}
    | R_ARR_CHAR IDENTIFICADOR_ARREGLO:nombreArreglo ASIGNACION LISTA_VALORES:val FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloChar(nombreArreglo.toString(), val.toString()); :}
;

// FUNCIONES ESTADÍSTICAS
estadistica ::= R_MEDIA PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.media(val.toString()); :}
    | R_MEDIANA PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.mediana(val.toString()); :}
    | R_MODA PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.moda(val.toString()); :}
    | R_VARIANZA PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.varianza(val.toString()); :}
    | R_MAX PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.maximo(val.toString()); :}
    | R_MIN PARENTESIS_A LISTA_VALORES:val PARENTESIS_C
    {: RESULT = func.Funcion.minimo(val.toString()); :}
    | R_MEDIA PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.media("@" + val.toString()); :}
    | R_MEDIANA PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.mediana("@" + val.toString()); :}
    | R_MODA PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.moda("@" + val.toString()); :}
    | R_VARIANZA PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.varianza("@" + val.toString()); :}
    | R_MAX PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.maximo("@" + val.toString()); :}
    | R_MIN PARENTESIS_A IDENTIFICADOR_ARREGLO:val PARENTESIS_C
    {: RESULT = func.Funcion.minimo("@" + val.toString()); :}

; 

lista_expresiones ::= lista_expresiones:a COMMA expresion:b
    {: RESULT = a.toString() + ", " + b.toString(); :}
    | expresion:a
    {: RESULT = a.toString(); :}
;

console_print ::= R_CONSOLE DOUBLE_COLLON R_PRINT IGUAL lista_expresiones:val FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimir(val.toString()); :}
;

console_column ::= R_CONSOLE DOUBLE_COLLON R_COLUMN IGUAL exp_string:titulo FLECHA IDENTIFICADOR_ARREGLO:valores FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimirColumna(titulo.toString(), "@" + valores.toString().substring(0)); :}
    | R_CONSOLE DOUBLE_COLLON R_COLUMN IGUAL exp_string:titulo FLECHA LISTA_VALORES:valores FIN_DECLARACION PUNTOYCOMA
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimirColumna(titulo.toString(), valores.toString()); :}
;


graficacion ::= GRAPHBAR PARENTESIS_A TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string:titulo FIN_DECLARACION PUNTOYCOMA
                EJEX DOUBLE_COLLON R_CHAR IGUAL LISTA_VALORES:valores1 FIN_DECLARACION PUNTOYCOMA
                EJEY DOUBLE_COLLON R_DOUBLE IGUAL LISTA_VALORES:valores2 FIN_DECLARACION PUNTOYCOMA
                TITULOX DOUBLE_COLLON R_CHAR IGUAL exp_string:tituloCX FIN_DECLARACION PUNTOYCOMA
                TITULOY DOUBLE_COLLON R_CHAR IGUAL exp_string:tituloCY FIN_DECLARACION PUNTOYCOMA
                EXEC_GRAPHBAR FIN_DECLARACION PUNTOYCOMA 
                PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
    {: codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarBarra(titulo.toString(), valores1.toString(), valores2.toString(), tituloCX.toString(), tituloCY.toString()); :}
;

