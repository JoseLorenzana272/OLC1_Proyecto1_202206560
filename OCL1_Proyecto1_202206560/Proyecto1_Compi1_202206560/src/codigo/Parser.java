
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\005\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\007\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\012\010\000\002" +
    "\013\010\000\002\014\010\000\002\015\010\000\002\016" +
    "\010\000\002\007\013\000\002\007\013\000\002\010\006" +
    "\000\002\011\010\000\002\011\010\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\027\005\000\002\027\003\000" +
    "\002\026\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\013\004\001\002\000\016\011\021\022" +
    "\023\026\017\032\013\033\016\051\010\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\020\011" +
    "\ufff9\014\ufff9\022\ufff9\026\ufff9\032\ufff9\033\ufff9\051\ufff9" +
    "\001\002\000\004\024\210\001\002\000\020\011\021\014" +
    "\207\022\023\026\017\032\013\033\016\051\010\001\002" +
    "\000\020\011\ufffe\014\ufffe\022\ufffe\026\ufffe\032\ufffe\033" +
    "\ufffe\051\ufffe\001\002\000\004\035\201\001\002\000\020" +
    "\011\ufffb\014\ufffb\022\ufffb\026\ufffb\032\ufffb\033\ufffb\051" +
    "\ufffb\001\002\000\020\011\ufffa\014\ufffa\022\ufffa\026\ufffa" +
    "\032\ufffa\033\ufffa\051\ufffa\001\002\000\004\035\174\001" +
    "\002\000\004\023\155\001\002\000\020\011\ufffc\014\ufffc" +
    "\022\ufffc\026\ufffc\032\ufffc\033\ufffc\051\ufffc\001\002\000" +
    "\004\004\151\001\002\000\020\011\ufff8\014\ufff8\022\ufff8" +
    "\026\ufff8\032\ufff8\033\ufff8\051\ufff8\001\002\000\004\017" +
    "\025\001\002\000\020\011\ufffd\014\ufffd\022\ufffd\026\ufffd" +
    "\032\ufffd\033\ufffd\051\ufffd\001\002\000\042\012\051\020" +
    "\027\021\032\022\045\035\046\036\054\037\050\040\043" +
    "\041\034\042\047\043\030\044\031\045\036\046\026\047" +
    "\041\050\037\001\002\000\004\004\144\001\002\000\014" +
    "\005\ufff2\007\ufff2\010\ufff2\025\ufff2\031\ufff2\001\002\000" +
    "\004\004\137\001\002\000\004\004\132\001\002\000\014" +
    "\005\ufff3\007\ufff3\010\ufff3\025\ufff3\031\ufff3\001\002\000" +
    "\010\007\061\010\060\031\131\001\002\000\004\004\124" +
    "\001\002\000\014\005\uffee\007\uffee\010\uffee\025\uffee\031" +
    "\uffee\001\002\000\004\004\117\001\002\000\004\004\112" +
    "\001\002\000\014\005\uffec\007\uffec\010\uffec\025\uffec\031" +
    "\uffec\001\002\000\004\004\105\001\002\000\014\005\uffea" +
    "\007\uffea\010\uffea\025\uffea\031\uffea\001\002\000\004\004" +
    "\100\001\002\000\014\005\uffed\007\uffed\010\uffed\025\uffed" +
    "\031\uffed\001\002\000\014\005\ufff1\007\ufff1\010\ufff1\025" +
    "\ufff1\031\ufff1\001\002\000\014\005\ufff0\007\ufff0\010\ufff0" +
    "\025\ufff0\031\ufff0\001\002\000\004\004\073\001\002\000" +
    "\004\004\066\001\002\000\014\005\ufff4\007\ufff4\010\ufff4" +
    "\025\ufff4\031\ufff4\001\002\000\014\005\uffeb\007\uffeb\010" +
    "\uffeb\025\uffeb\031\uffeb\001\002\000\014\005\uffef\007\uffef" +
    "\010\uffef\025\uffef\031\uffef\001\002\000\004\004\055\001" +
    "\002\000\042\012\051\020\027\021\032\022\045\035\046" +
    "\036\054\037\050\040\043\041\034\042\047\043\030\044" +
    "\031\045\036\046\026\047\041\050\037\001\002\000\010" +
    "\007\061\010\060\025\057\001\002\000\042\012\051\020" +
    "\027\021\032\022\045\035\046\036\054\037\050\040\043" +
    "\041\034\042\047\043\030\044\031\045\036\046\026\047" +
    "\041\050\037\001\002\000\042\012\051\020\027\021\032" +
    "\022\045\035\046\036\054\037\050\040\043\041\034\042" +
    "\047\043\030\044\031\045\036\046\026\047\041\050\037" +
    "\001\002\000\042\012\051\020\027\021\032\022\045\035" +
    "\046\036\054\037\050\040\043\041\034\042\047\043\030" +
    "\044\031\045\036\046\026\047\041\050\037\001\002\000" +
    "\014\005\ufff5\007\ufff5\010\ufff5\025\ufff5\031\ufff5\001\002" +
    "\000\014\005\ufff6\007\061\010\ufff6\025\ufff6\031\ufff6\001" +
    "\002\000\010\005\065\007\061\010\060\001\002\000\014" +
    "\005\uffe9\007\uffe9\010\uffe9\025\uffe9\031\uffe9\001\002\000" +
    "\042\012\051\020\027\021\032\022\045\035\046\036\054" +
    "\037\050\040\043\041\034\042\047\043\030\044\031\045" +
    "\036\046\026\047\041\050\037\001\002\000\010\007\061" +
    "\010\060\025\070\001\002\000\042\012\051\020\027\021" +
    "\032\022\045\035\046\036\054\037\050\040\043\041\034" +
    "\042\047\043\030\044\031\045\036\046\026\047\041\050" +
    "\037\001\002\000\010\005\072\007\061\010\060\001\002" +
    "\000\014\005\uffe8\007\uffe8\010\uffe8\025\uffe8\031\uffe8\001" +
    "\002\000\042\012\051\020\027\021\032\022\045\035\046" +
    "\036\054\037\050\040\043\041\034\042\047\043\030\044" +
    "\031\045\036\046\026\047\041\050\037\001\002\000\010" +
    "\007\061\010\060\025\075\001\002\000\042\012\051\020" +
    "\027\021\032\022\045\035\046\036\054\037\050\040\043" +
    "\041\034\042\047\043\030\044\031\045\036\046\026\047" +
    "\041\050\037\001\002\000\010\005\077\007\061\010\060" +
    "\001\002\000\014\005\uffe5\007\uffe5\010\uffe5\025\uffe5\031" +
    "\uffe5\001\002\000\042\012\051\020\027\021\032\022\045" +
    "\035\046\036\054\037\050\040\043\041\034\042\047\043" +
    "\030\044\031\045\036\046\026\047\041\050\037\001\002" +
    "\000\010\007\061\010\060\025\102\001\002\000\042\012" +
    "\051\020\027\021\032\022\045\035\046\036\054\037\050" +
    "\040\043\041\034\042\047\043\030\044\031\045\036\046" +
    "\026\047\041\050\037\001\002\000\010\005\104\007\061" +
    "\010\060\001\002\000\014\005\uffe7\007\uffe7\010\uffe7\025" +
    "\uffe7\031\uffe7\001\002\000\006\034\107\035\106\001\002" +
    "\000\004\005\111\001\002\000\004\005\110\001\002\000" +
    "\014\005\uffdb\007\uffdb\010\uffdb\025\uffdb\031\uffdb\001\002" +
    "\000\014\005\uffd5\007\uffd5\010\uffd5\025\uffd5\031\uffd5\001" +
    "\002\000\006\034\114\035\113\001\002\000\004\005\116" +
    "\001\002\000\004\005\115\001\002\000\014\005\uffda\007" +
    "\uffda\010\uffda\025\uffda\031\uffda\001\002\000\014\005\uffd4" +
    "\007\uffd4\010\uffd4\025\uffd4\031\uffd4\001\002\000\006\034" +
    "\121\035\120\001\002\000\004\005\123\001\002\000\004" +
    "\005\122\001\002\000\014\005\uffdd\007\uffdd\010\uffdd\025" +
    "\uffdd\031\uffdd\001\002\000\014\005\uffd7\007\uffd7\010\uffd7" +
    "\025\uffd7\031\uffd7\001\002\000\042\012\051\020\027\021" +
    "\032\022\045\035\046\036\054\037\050\040\043\041\034" +
    "\042\047\043\030\044\031\045\036\046\026\047\041\050" +
    "\037\001\002\000\010\007\061\010\060\025\126\001\002" +
    "\000\042\012\051\020\027\021\032\022\045\035\046\036" +
    "\054\037\050\040\043\041\034\042\047\043\030\044\031" +
    "\045\036\046\026\047\041\050\037\001\002\000\010\005" +
    "\130\007\061\010\060\001\002\000\014\005\uffe6\007\uffe6" +
    "\010\uffe6\025\uffe6\031\uffe6\001\002\000\020\011\uffe2\014" +
    "\uffe2\022\uffe2\026\uffe2\032\uffe2\033\uffe2\051\uffe2\001\002" +
    "\000\006\034\134\035\133\001\002\000\004\005\136\001" +
    "\002\000\004\005\135\001\002\000\014\005\uffde\007\uffde" +
    "\010\uffde\025\uffde\031\uffde\001\002\000\014\005\uffd8\007" +
    "\uffd8\010\uffd8\025\uffd8\031\uffd8\001\002\000\006\034\141" +
    "\035\140\001\002\000\004\005\143\001\002\000\004\005" +
    "\142\001\002\000\014\005\uffdf\007\uffdf\010\uffdf\025\uffdf" +
    "\031\uffdf\001\002\000\014\005\uffd9\007\uffd9\010\uffd9\025" +
    "\uffd9\031\uffd9\001\002\000\006\034\146\035\145\001\002" +
    "\000\004\005\150\001\002\000\004\005\147\001\002\000" +
    "\014\005\uffdc\007\uffdc\010\uffdc\025\uffdc\031\uffdc\001\002" +
    "\000\014\005\uffd6\007\uffd6\010\uffd6\025\uffd6\031\uffd6\001" +
    "\002\000\042\012\051\020\027\021\032\022\045\035\046" +
    "\036\054\037\050\040\043\041\034\042\047\043\030\044" +
    "\031\045\036\046\026\047\041\050\037\001\002\000\010" +
    "\005\153\007\061\010\060\001\002\000\004\006\154\001" +
    "\002\000\020\011\ufff7\014\ufff7\022\ufff7\026\ufff7\032\ufff7" +
    "\033\ufff7\051\ufff7\001\002\000\006\027\157\030\156\001" +
    "\002\000\004\024\166\001\002\000\004\024\160\001\002" +
    "\000\004\022\161\001\002\000\004\017\162\001\002\000" +
    "\042\012\051\020\027\021\032\022\045\035\046\036\054" +
    "\037\050\040\043\041\034\042\047\043\030\044\031\045" +
    "\036\046\026\047\041\050\037\001\002\000\010\007\061" +
    "\010\060\031\164\001\002\000\004\006\165\001\002\000" +
    "\020\011\uffe4\014\uffe4\022\uffe4\026\uffe4\032\uffe4\033\uffe4" +
    "\051\uffe4\001\002\000\004\022\167\001\002\000\004\017" +
    "\170\001\002\000\004\020\171\001\002\000\004\031\172" +
    "\001\002\000\004\006\173\001\002\000\020\011\uffe3\014" +
    "\uffe3\022\uffe3\026\uffe3\032\uffe3\033\uffe3\051\uffe3\001\002" +
    "\000\004\017\175\001\002\000\004\034\176\001\002\000" +
    "\004\031\177\001\002\000\004\006\200\001\002\000\020" +
    "\011\uffe0\014\uffe0\022\uffe0\026\uffe0\032\uffe0\033\uffe0\051" +
    "\uffe0\001\002\000\004\017\202\001\002\000\004\034\203" +
    "\001\002\000\004\031\204\001\002\000\004\006\205\001" +
    "\002\000\020\011\uffe1\014\uffe1\022\uffe1\026\uffe1\032\uffe1" +
    "\033\uffe1\051\uffe1\001\002\000\020\011\uffff\014\uffff\022" +
    "\uffff\026\uffff\032\uffff\033\uffff\051\uffff\001\002\000\004" +
    "\002\000\001\002\000\004\052\211\001\002\000\004\053" +
    "\212\001\002\000\042\012\051\020\027\021\032\022\045" +
    "\035\046\036\054\037\050\040\043\041\034\042\047\043" +
    "\030\044\031\045\036\046\026\047\041\050\037\001\002" +
    "\000\012\007\061\010\060\025\uffd2\031\uffd2\001\002\000" +
    "\006\025\215\031\216\001\002\000\042\012\051\020\027" +
    "\021\032\022\045\035\046\036\054\037\050\040\043\041" +
    "\034\042\047\043\030\044\031\045\036\046\026\047\041" +
    "\050\037\001\002\000\004\006\217\001\002\000\020\011" +
    "\uffd1\014\uffd1\022\uffd1\026\uffd1\032\uffd1\033\uffd1\051\uffd1" +
    "\001\002\000\012\007\061\010\060\025\uffd3\031\uffd3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\002\004\001\001\000\022\003\011\004" +
    "\023\005\010\007\017\010\013\011\014\026\006\030\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\205\004\023\007\017" +
    "\010\013\011\014\026\006\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\032\012\052\013\034\014\043\015" +
    "\037\016\051\025\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\055\012" +
    "\052\013\034\014\043\015\037\016\051\025\041\001\001" +
    "\000\002\001\001\000\020\006\063\012\052\013\034\014" +
    "\043\015\037\016\051\025\041\001\001\000\020\006\062" +
    "\012\052\013\034\014\043\015\037\016\051\025\041\001" +
    "\001\000\020\006\061\012\052\013\034\014\043\015\037" +
    "\016\051\025\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\066" +
    "\012\052\013\034\014\043\015\037\016\051\025\041\001" +
    "\001\000\002\001\001\000\020\006\070\012\052\013\034" +
    "\014\043\015\037\016\051\025\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\073\012\052\013\034" +
    "\014\043\015\037\016\051\025\041\001\001\000\002\001" +
    "\001\000\020\006\075\012\052\013\034\014\043\015\037" +
    "\016\051\025\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\100\012\052\013\034\014\043\015\037" +
    "\016\051\025\041\001\001\000\002\001\001\000\020\006" +
    "\102\012\052\013\034\014\043\015\037\016\051\025\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\124\012\052\013\034" +
    "\014\043\015\037\016\051\025\041\001\001\000\002\001" +
    "\001\000\020\006\126\012\052\013\034\014\043\015\037" +
    "\016\051\025\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\151\012\052\013\034\014\043\015\037\016" +
    "\051\025\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\162\012\052\013\034\014\043\015\037\016\051\025" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\212\012\052\013\034\014" +
    "\043\015\037\016\051\025\041\027\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\217\012\052\013" +
    "\034\014\043\015\037\016\051\025\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= R_PROGRAM lista_instr R_ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= mostrar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= console_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= console_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mostrar ::= R_MOSTRAR PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.mostrar(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mostrar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Double)a + (Double)b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Double)a * (Double)b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.obtenerValor(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= IDENTIFICADOR_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.obtenerValor(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= suma 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= resta 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= multi 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= division 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= modulo 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= estadistica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // suma ::= R_SUM PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.sumar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suma",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // resta ::= R_RES PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.restar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multi ::= R_MUL PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.multiplicar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // division ::= R_DIV PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.dividir(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("division",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modulo ::= R_MOD PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.modular(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modulo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= R_VAR COLLON R_DOUBLE DOUBLE_COLLON IDENTIFICADOR ASIGNACION expresion FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararDouble(nombreVariable.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= R_VAR COLLON R_CHAR DOUBLE_COLLON IDENTIFICADOR ASIGNACION CADENA FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararCadena(nombreVariable.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= IDENTIFICADOR ASIGNACION expresion FIN_DECLARACION 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.asignarValor(nombreVariable.toString(), valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_arreglo ::= R_ARR_DOUBLE IDENTIFICADOR_ARREGLO ASIGNACION LISTA_VALORES FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreArreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloDouble(nombreArreglo.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_arreglo ::= R_ARR_CHAR IDENTIFICADOR_ARREGLO ASIGNACION LISTA_VALORES FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreArreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloChar(nombreArreglo.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estadistica ::= R_MEDIA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.media(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estadistica ::= R_MEDIANA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.mediana(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estadistica ::= R_MODA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.moda(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estadistica ::= R_VARIANZA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.varianza(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estadistica ::= R_MAX PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.maximo(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estadistica ::= R_MIN PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.minimo(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estadistica ::= R_MEDIA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.media("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estadistica ::= R_MEDIANA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.mediana("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estadistica ::= R_MODA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.moda("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estadistica ::= R_VARIANZA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.varianza("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estadistica ::= R_MAX PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.maximo("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estadistica ::= R_MIN PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.minimo("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_expresiones ::= lista_expresiones COMMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + ", " + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // console_print ::= R_CONSOLE DOUBLE_COLLON R_PRINT IGUAL lista_expresiones FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimir(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_print",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
