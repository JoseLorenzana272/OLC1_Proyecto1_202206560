
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\005\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\007\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\031" +
    "\003\000\002\031\003\000\002\012\010\000\002\013\010" +
    "\000\002\014\010\000\002\015\010\000\002\016\010\000" +
    "\002\007\013\000\002\007\013\000\002\010\006\000\002" +
    "\011\010\000\002\011\010\000\002\025\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\027\005\000\002\027\003\000\002\026" +
    "\011\000\002\030\013\000\002\030\013\000\002\032\055" +
    "\000\002\033\037\000\002\034\055\000\002\034\055\000" +
    "\002\035\030" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\013\004\001\002\000\026\011\033\022" +
    "\027\026\025\032\031\033\022\051\026\056\032\065\024" +
    "\071\030\073\007\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\004\004\u0133\001\002\000\030" +
    "\011\033\014\u0132\022\027\026\025\032\031\033\022\051" +
    "\026\056\032\065\024\071\030\073\007\001\002\000\030" +
    "\011\ufffe\014\ufffe\022\ufffe\026\ufffe\032\ufffe\033\ufffe\051" +
    "\ufffe\056\ufffe\065\ufffe\071\ufffe\073\ufffe\001\002\000\030" +
    "\011\ufff9\014\ufff9\022\ufff9\026\ufff9\032\ufff9\033\ufff9\051" +
    "\ufff9\056\ufff9\065\ufff9\071\ufff9\073\ufff9\001\002\000\030" +
    "\011\ufff4\014\ufff4\022\ufff4\026\ufff4\032\ufff4\033\ufff4\051" +
    "\ufff4\056\ufff4\065\ufff4\071\ufff4\073\ufff4\001\002\000\030" +
    "\011\ufffb\014\ufffb\022\ufffb\026\ufffb\032\ufffb\033\ufffb\051" +
    "\ufffb\056\ufffb\065\ufffb\071\ufffb\073\ufffb\001\002\000\030" +
    "\011\ufffc\014\ufffc\022\ufffc\026\ufffc\032\ufffc\033\ufffc\051" +
    "\ufffc\056\ufffc\065\ufffc\071\ufffc\073\ufffc\001\002\000\030" +
    "\011\ufff6\014\ufff6\022\ufff6\026\ufff6\032\ufff6\033\ufff6\051" +
    "\ufff6\056\ufff6\065\ufff6\071\ufff6\073\ufff6\001\002\000\030" +
    "\011\ufff7\014\ufff7\022\ufff7\026\ufff7\032\ufff7\033\ufff7\051" +
    "\ufff7\056\ufff7\065\ufff7\071\ufff7\073\ufff7\001\002\000\030" +
    "\011\ufffa\014\ufffa\022\ufffa\026\ufffa\032\ufffa\033\ufffa\051" +
    "\ufffa\056\ufffa\065\ufffa\071\ufffa\073\ufffa\001\002\000\030" +
    "\011\ufff8\014\ufff8\022\ufff8\026\ufff8\032\ufff8\033\ufff8\051" +
    "\ufff8\056\ufff8\065\ufff8\071\ufff8\073\ufff8\001\002\000\004" +
    "\035\u012c\001\002\000\030\011\ufff5\014\ufff5\022\ufff5\026" +
    "\ufff5\032\ufff5\033\ufff5\051\ufff5\056\ufff5\065\ufff5\071\ufff5" +
    "\073\ufff5\001\002\000\004\004\u0110\001\002\000\004\023" +
    "\u0101\001\002\000\004\024\356\001\002\000\004\017\353" +
    "\001\002\000\004\004\243\001\002\000\004\035\236\001" +
    "\002\000\004\004\162\001\002\000\004\004\035\001\002" +
    "\000\030\011\ufffd\014\ufffd\022\ufffd\026\ufffd\032\ufffd\033" +
    "\ufffd\051\ufffd\056\ufffd\065\ufffd\071\ufffd\073\ufffd\001\002" +
    "\000\042\012\061\020\037\021\042\022\055\035\057\036" +
    "\064\037\060\040\053\041\044\042\056\043\040\044\041" +
    "\045\046\046\036\047\051\050\047\001\002\000\004\004" +
    "\155\001\002\000\014\005\uffee\007\uffee\010\uffee\025\uffee" +
    "\031\uffee\001\002\000\004\004\150\001\002\000\004\004" +
    "\143\001\002\000\014\005\uffef\007\uffef\010\uffef\025\uffef" +
    "\031\uffef\001\002\000\010\005\141\007\071\010\070\001" +
    "\002\000\004\004\134\001\002\000\014\005\uffea\007\uffea" +
    "\010\uffea\025\uffea\031\uffea\001\002\000\004\004\127\001" +
    "\002\000\004\004\122\001\002\000\014\005\uffe8\007\uffe8" +
    "\010\uffe8\025\uffe8\031\uffe8\001\002\000\004\004\115\001" +
    "\002\000\014\005\uffe6\007\uffe6\010\uffe6\025\uffe6\031\uffe6" +
    "\001\002\000\004\004\110\001\002\000\014\005\uffe9\007" +
    "\uffe9\010\uffe9\025\uffe9\031\uffe9\001\002\000\014\005\uffed" +
    "\007\uffed\010\uffed\025\uffed\031\uffed\001\002\000\004\004" +
    "\103\001\002\000\014\005\uffec\007\uffec\010\uffec\025\uffec" +
    "\031\uffec\001\002\000\004\004\076\001\002\000\014\005" +
    "\ufff0\007\ufff0\010\ufff0\025\ufff0\031\ufff0\001\002\000\014" +
    "\005\uffe7\007\uffe7\010\uffe7\025\uffe7\031\uffe7\001\002\000" +
    "\014\005\uffeb\007\uffeb\010\uffeb\025\uffeb\031\uffeb\001\002" +
    "\000\004\004\065\001\002\000\042\012\061\020\037\021" +
    "\042\022\055\035\057\036\064\037\060\040\053\041\044" +
    "\042\056\043\040\044\041\045\046\046\036\047\051\050" +
    "\047\001\002\000\010\007\071\010\070\025\067\001\002" +
    "\000\042\012\061\020\037\021\042\022\055\035\057\036" +
    "\064\037\060\040\053\041\044\042\056\043\040\044\041" +
    "\045\046\046\036\047\051\050\047\001\002\000\042\012" +
    "\061\020\037\021\042\022\055\035\057\036\064\037\060" +
    "\040\053\041\044\042\056\043\040\044\041\045\046\046" +
    "\036\047\051\050\047\001\002\000\042\012\061\020\037" +
    "\021\042\022\055\035\057\036\064\037\060\040\053\041" +
    "\044\042\056\043\040\044\041\045\046\046\036\047\051" +
    "\050\047\001\002\000\014\005\ufff1\007\ufff1\010\ufff1\025" +
    "\ufff1\031\ufff1\001\002\000\014\005\ufff2\007\071\010\ufff2" +
    "\025\ufff2\031\ufff2\001\002\000\010\005\075\007\071\010" +
    "\070\001\002\000\014\005\uffe3\007\uffe3\010\uffe3\025\uffe3" +
    "\031\uffe3\001\002\000\042\012\061\020\037\021\042\022" +
    "\055\035\057\036\064\037\060\040\053\041\044\042\056" +
    "\043\040\044\041\045\046\046\036\047\051\050\047\001" +
    "\002\000\010\007\071\010\070\025\100\001\002\000\042" +
    "\012\061\020\037\021\042\022\055\035\057\036\064\037" +
    "\060\040\053\041\044\042\056\043\040\044\041\045\046" +
    "\046\036\047\051\050\047\001\002\000\010\005\102\007" +
    "\071\010\070\001\002\000\014\005\uffe2\007\uffe2\010\uffe2" +
    "\025\uffe2\031\uffe2\001\002\000\042\012\061\020\037\021" +
    "\042\022\055\035\057\036\064\037\060\040\053\041\044" +
    "\042\056\043\040\044\041\045\046\046\036\047\051\050" +
    "\047\001\002\000\010\007\071\010\070\025\105\001\002" +
    "\000\042\012\061\020\037\021\042\022\055\035\057\036" +
    "\064\037\060\040\053\041\044\042\056\043\040\044\041" +
    "\045\046\046\036\047\051\050\047\001\002\000\010\005" +
    "\107\007\071\010\070\001\002\000\014\005\uffdf\007\uffdf" +
    "\010\uffdf\025\uffdf\031\uffdf\001\002\000\042\012\061\020" +
    "\037\021\042\022\055\035\057\036\064\037\060\040\053" +
    "\041\044\042\056\043\040\044\041\045\046\046\036\047" +
    "\051\050\047\001\002\000\010\007\071\010\070\025\112" +
    "\001\002\000\042\012\061\020\037\021\042\022\055\035" +
    "\057\036\064\037\060\040\053\041\044\042\056\043\040" +
    "\044\041\045\046\046\036\047\051\050\047\001\002\000" +
    "\010\005\114\007\071\010\070\001\002\000\014\005\uffe1" +
    "\007\uffe1\010\uffe1\025\uffe1\031\uffe1\001\002\000\006\034" +
    "\117\035\116\001\002\000\004\005\121\001\002\000\004" +
    "\005\120\001\002\000\014\005\uffd5\007\uffd5\010\uffd5\025" +
    "\uffd5\031\uffd5\001\002\000\014\005\uffcf\007\uffcf\010\uffcf" +
    "\025\uffcf\031\uffcf\001\002\000\006\034\124\035\123\001" +
    "\002\000\004\005\126\001\002\000\004\005\125\001\002" +
    "\000\014\005\uffd4\007\uffd4\010\uffd4\025\uffd4\031\uffd4\001" +
    "\002\000\014\005\uffce\007\uffce\010\uffce\025\uffce\031\uffce" +
    "\001\002\000\006\034\131\035\130\001\002\000\004\005" +
    "\133\001\002\000\004\005\132\001\002\000\014\005\uffd7" +
    "\007\uffd7\010\uffd7\025\uffd7\031\uffd7\001\002\000\014\005" +
    "\uffd1\007\uffd1\010\uffd1\025\uffd1\031\uffd1\001\002\000\042" +
    "\012\061\020\037\021\042\022\055\035\057\036\064\037" +
    "\060\040\053\041\044\042\056\043\040\044\041\045\046" +
    "\046\036\047\051\050\047\001\002\000\010\007\071\010" +
    "\070\025\136\001\002\000\042\012\061\020\037\021\042" +
    "\022\055\035\057\036\064\037\060\040\053\041\044\042" +
    "\056\043\040\044\041\045\046\046\036\047\051\050\047" +
    "\001\002\000\010\005\140\007\071\010\070\001\002\000" +
    "\014\005\uffe0\007\uffe0\010\uffe0\025\uffe0\031\uffe0\001\002" +
    "\000\004\006\142\001\002\000\030\011\ufff3\014\ufff3\022" +
    "\ufff3\026\ufff3\032\ufff3\033\ufff3\051\ufff3\056\ufff3\065\ufff3" +
    "\071\ufff3\073\ufff3\001\002\000\006\034\145\035\144\001" +
    "\002\000\004\005\147\001\002\000\004\005\146\001\002" +
    "\000\014\005\uffd8\007\uffd8\010\uffd8\025\uffd8\031\uffd8\001" +
    "\002\000\014\005\uffd2\007\uffd2\010\uffd2\025\uffd2\031\uffd2" +
    "\001\002\000\006\034\152\035\151\001\002\000\004\005" +
    "\154\001\002\000\004\005\153\001\002\000\014\005\uffd9" +
    "\007\uffd9\010\uffd9\025\uffd9\031\uffd9\001\002\000\014\005" +
    "\uffd3\007\uffd3\010\uffd3\025\uffd3\031\uffd3\001\002\000\006" +
    "\034\157\035\156\001\002\000\004\005\161\001\002\000" +
    "\004\005\160\001\002\000\014\005\uffd6\007\uffd6\010\uffd6" +
    "\025\uffd6\031\uffd6\001\002\000\014\005\uffd0\007\uffd0\010" +
    "\uffd0\025\uffd0\031\uffd0\001\002\000\004\057\163\001\002" +
    "\000\004\024\164\001\002\000\004\030\165\001\002\000" +
    "\004\053\166\001\002\000\006\020\170\022\167\001\002" +
    "\000\006\031\uffe4\055\uffe4\001\002\000\006\031\uffe5\055" +
    "\uffe5\001\002\000\004\031\172\001\002\000\004\006\173" +
    "\001\002\000\004\060\174\001\002\000\004\024\175\001" +
    "\002\000\004\030\176\001\002\000\004\053\177\001\002" +
    "\000\004\034\200\001\002\000\004\031\201\001\002\000" +
    "\004\006\202\001\002\000\004\061\203\001\002\000\004" +
    "\024\204\001\002\000\004\027\205\001\002\000\004\053" +
    "\206\001\002\000\004\034\207\001\002\000\004\031\210" +
    "\001\002\000\004\006\211\001\002\000\004\062\212\001" +
    "\002\000\004\024\213\001\002\000\004\030\214\001\002" +
    "\000\004\053\215\001\002\000\006\020\170\022\167\001" +
    "\002\000\004\031\217\001\002\000\004\006\220\001\002" +
    "\000\004\063\221\001\002\000\004\024\222\001\002\000" +
    "\004\030\223\001\002\000\004\053\224\001\002\000\006" +
    "\020\170\022\167\001\002\000\004\031\226\001\002\000" +
    "\004\006\227\001\002\000\004\064\230\001\002\000\004" +
    "\031\231\001\002\000\004\006\232\001\002\000\004\005" +
    "\233\001\002\000\004\031\234\001\002\000\004\006\235" +
    "\001\002\000\030\011\uffc8\014\uffc8\022\uffc8\026\uffc8\032" +
    "\uffc8\033\uffc8\051\uffc8\056\uffc8\065\uffc8\071\uffc8\073\uffc8" +
    "\001\002\000\004\017\237\001\002\000\004\034\240\001" +
    "\002\000\004\031\241\001\002\000\004\006\242\001\002" +
    "\000\030\011\uffdb\014\uffdb\022\uffdb\026\uffdb\032\uffdb\033" +
    "\uffdb\051\uffdb\056\uffdb\065\uffdb\071\uffdb\073\uffdb\001\002" +
    "\000\004\057\244\001\002\000\004\024\245\001\002\000" +
    "\004\030\246\001\002\000\004\053\247\001\002\000\006" +
    "\020\170\022\167\001\002\000\004\031\251\001\002\000" +
    "\004\006\252\001\002\000\004\060\253\001\002\000\004" +
    "\024\254\001\002\000\004\030\255\001\002\000\004\053" +
    "\256\001\002\000\006\034\260\035\257\001\002\000\004" +
    "\031\316\001\002\000\004\031\261\001\002\000\004\006" +
    "\262\001\002\000\004\061\263\001\002\000\004\024\264" +
    "\001\002\000\004\027\265\001\002\000\004\053\266\001" +
    "\002\000\004\034\267\001\002\000\004\031\270\001\002" +
    "\000\004\006\271\001\002\000\004\062\272\001\002\000" +
    "\004\024\273\001\002\000\004\030\274\001\002\000\004" +
    "\053\275\001\002\000\006\020\170\022\167\001\002\000" +
    "\004\031\277\001\002\000\004\006\300\001\002\000\004" +
    "\063\301\001\002\000\004\024\302\001\002\000\004\030" +
    "\303\001\002\000\004\053\304\001\002\000\006\020\170" +
    "\022\167\001\002\000\004\031\306\001\002\000\004\006" +
    "\307\001\002\000\004\072\310\001\002\000\004\031\311" +
    "\001\002\000\004\006\312\001\002\000\004\005\313\001" +
    "\002\000\004\031\314\001\002\000\004\006\315\001\002" +
    "\000\030\011\uffc6\014\uffc6\022\uffc6\026\uffc6\032\uffc6\033" +
    "\uffc6\051\uffc6\056\uffc6\065\uffc6\071\uffc6\073\uffc6\001\002" +
    "\000\004\006\317\001\002\000\004\061\320\001\002\000" +
    "\004\024\321\001\002\000\004\027\322\001\002\000\004" +
    "\053\323\001\002\000\004\035\324\001\002\000\004\031" +
    "\325\001\002\000\004\006\326\001\002\000\004\062\327" +
    "\001\002\000\004\024\330\001\002\000\004\030\331\001" +
    "\002\000\004\053\332\001\002\000\006\020\170\022\167" +
    "\001\002\000\004\031\334\001\002\000\004\006\335\001" +
    "\002\000\004\063\336\001\002\000\004\024\337\001\002" +
    "\000\004\030\340\001\002\000\004\053\341\001\002\000" +
    "\006\020\170\022\167\001\002\000\004\031\343\001\002" +
    "\000\004\006\344\001\002\000\004\072\345\001\002\000" +
    "\004\031\346\001\002\000\004\006\347\001\002\000\004" +
    "\005\350\001\002\000\004\031\351\001\002\000\004\006" +
    "\352\001\002\000\030\011\uffc5\014\uffc5\022\uffc5\026\uffc5" +
    "\032\uffc5\033\uffc5\051\uffc5\056\uffc5\065\uffc5\071\uffc5\073" +
    "\uffc5\001\002\000\042\012\061\020\037\021\042\022\055" +
    "\035\057\036\064\037\060\040\053\041\044\042\056\043" +
    "\040\044\041\045\046\046\036\047\051\050\047\001\002" +
    "\000\010\007\071\010\070\031\355\001\002\000\030\011" +
    "\uffdc\014\uffdc\022\uffdc\026\uffdc\032\uffdc\033\uffdc\051\uffdc" +
    "\056\uffdc\065\uffdc\071\uffdc\073\uffdc\001\002\000\006\052" +
    "\360\054\357\001\002\000\004\053\370\001\002\000\004" +
    "\053\361\001\002\000\042\012\061\020\037\021\042\022" +
    "\055\035\057\036\064\037\060\040\053\041\044\042\056" +
    "\043\040\044\041\045\046\046\036\047\051\050\047\001" +
    "\002\000\012\007\071\010\070\025\uffcc\031\uffcc\001\002" +
    "\000\006\025\364\031\365\001\002\000\042\012\061\020" +
    "\037\021\042\022\055\035\057\036\064\037\060\040\053" +
    "\041\044\042\056\043\040\044\041\045\046\046\036\047" +
    "\051\050\047\001\002\000\004\006\366\001\002\000\030" +
    "\011\uffcb\014\uffcb\022\uffcb\026\uffcb\032\uffcb\033\uffcb\051" +
    "\uffcb\056\uffcb\065\uffcb\071\uffcb\073\uffcb\001\002\000\012" +
    "\007\071\010\070\025\uffcd\031\uffcd\001\002\000\006\020" +
    "\170\022\167\001\002\000\004\055\372\001\002\000\006" +
    "\034\374\035\373\001\002\000\004\031\377\001\002\000" +
    "\004\031\375\001\002\000\004\006\376\001\002\000\030" +
    "\011\uffc9\014\uffc9\022\uffc9\026\uffc9\032\uffc9\033\uffc9\051" +
    "\uffc9\056\uffc9\065\uffc9\071\uffc9\073\uffc9\001\002\000\004" +
    "\006\u0100\001\002\000\030\011\uffca\014\uffca\022\uffca\026" +
    "\uffca\032\uffca\033\uffca\051\uffca\056\uffca\065\uffca\071\uffca" +
    "\073\uffca\001\002\000\006\027\u0103\030\u0102\001\002\000" +
    "\004\024\u010a\001\002\000\004\024\u0104\001\002\000\004" +
    "\022\u0105\001\002\000\004\017\u0106\001\002\000\042\012" +
    "\061\020\037\021\042\022\055\035\057\036\064\037\060" +
    "\040\053\041\044\042\056\043\040\044\041\045\046\046" +
    "\036\047\051\050\047\001\002\000\010\007\071\010\070" +
    "\031\u0108\001\002\000\004\006\u0109\001\002\000\030\011" +
    "\uffde\014\uffde\022\uffde\026\uffde\032\uffde\033\uffde\051\uffde" +
    "\056\uffde\065\uffde\071\uffde\073\uffde\001\002\000\004\022" +
    "\u010b\001\002\000\004\017\u010c\001\002\000\004\020\u010d" +
    "\001\002\000\004\031\u010e\001\002\000\004\006\u010f\001" +
    "\002\000\030\011\uffdd\014\uffdd\022\uffdd\026\uffdd\032\uffdd" +
    "\033\uffdd\051\uffdd\056\uffdd\065\uffdd\071\uffdd\073\uffdd\001" +
    "\002\000\004\067\u0111\001\002\000\004\024\u0112\001\002" +
    "\000\004\030\u0113\001\002\000\004\053\u0114\001\002\000" +
    "\004\034\u0115\001\002\000\004\031\u0116\001\002\000\004" +
    "\006\u0117\001\002\000\004\070\u0118\001\002\000\004\024" +
    "\u0119\001\002\000\004\027\u011a\001\002\000\004\053\u011b" +
    "\001\002\000\004\034\u011c\001\002\000\004\031\u011d\001" +
    "\002\000\004\006\u011e\001\002\000\004\057\u011f\001\002" +
    "\000\004\024\u0120\001\002\000\004\030\u0121\001\002\000" +
    "\004\053\u0122\001\002\000\006\020\170\022\167\001\002" +
    "\000\004\031\u0124\001\002\000\004\006\u0125\001\002\000" +
    "\004\066\u0126\001\002\000\004\031\u0127\001\002\000\004" +
    "\006\u0128\001\002\000\004\005\u0129\001\002\000\004\031" +
    "\u012a\001\002\000\004\006\u012b\001\002\000\030\011\uffc7" +
    "\014\uffc7\022\uffc7\026\uffc7\032\uffc7\033\uffc7\051\uffc7\056" +
    "\uffc7\065\uffc7\071\uffc7\073\uffc7\001\002\000\004\017\u012d" +
    "\001\002\000\004\034\u012e\001\002\000\004\031\u012f\001" +
    "\002\000\004\006\u0130\001\002\000\030\011\uffda\014\uffda" +
    "\022\uffda\026\uffda\032\uffda\033\uffda\051\uffda\056\uffda\065" +
    "\uffda\071\uffda\073\uffda\001\002\000\030\011\uffff\014\uffff" +
    "\022\uffff\026\uffff\032\uffff\033\uffff\051\uffff\056\uffff\065" +
    "\uffff\071\uffff\073\uffff\001\002\000\004\002\000\001\002" +
    "\000\004\057\u0134\001\002\000\004\024\u0135\001\002\000" +
    "\004\030\u0136\001\002\000\004\053\u0137\001\002\000\006" +
    "\020\170\022\167\001\002\000\004\031\u0139\001\002\000" +
    "\004\006\u013a\001\002\000\004\070\u013b\001\002\000\004" +
    "\024\u013c\001\002\000\004\027\u013d\001\002\000\004\053" +
    "\u013e\001\002\000\004\034\u013f\001\002\000\004\031\u0140" +
    "\001\002\000\004\006\u0141\001\002\000\004\074\u0142\001" +
    "\002\000\004\031\u0143\001\002\000\004\006\u0144\001\002" +
    "\000\004\005\u0145\001\002\000\004\031\u0146\001\002\000" +
    "\004\006\u0147\001\002\000\030\011\uffc4\014\uffc4\022\uffc4" +
    "\026\uffc4\032\uffc4\033\uffc4\051\uffc4\056\uffc4\065\uffc4\071" +
    "\uffc4\073\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\002\004\001\001\000\032\003\010\004" +
    "\033\005\007\007\014\010\013\011\017\026\011\030\020" +
    "\032\016\033\015\034\022\035\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\u0130" +
    "\004\033\007\014\010\013\011\017\026\011\030\020\032" +
    "\016\033\015\034\022\035\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\042\012\062\013\044\014\053\015\047\016\061\025" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\065\012\062\013\044\014" +
    "\053\015\047\016\061\025\051\001\001\000\002\001\001" +
    "\000\020\006\073\012\062\013\044\014\053\015\047\016" +
    "\061\025\051\001\001\000\020\006\072\012\062\013\044" +
    "\014\053\015\047\016\061\025\051\001\001\000\020\006" +
    "\071\012\062\013\044\014\053\015\047\016\061\025\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\076\012\062\013\044" +
    "\014\053\015\047\016\061\025\051\001\001\000\002\001" +
    "\001\000\020\006\100\012\062\013\044\014\053\015\047" +
    "\016\061\025\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\103\012\062\013\044\014\053\015\047" +
    "\016\061\025\051\001\001\000\002\001\001\000\020\006" +
    "\105\012\062\013\044\014\053\015\047\016\061\025\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\110\012\062\013\044\014\053\015\047\016\061\025\051" +
    "\001\001\000\002\001\001\000\020\006\112\012\062\013" +
    "\044\014\053\015\047\016\061\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\134\012\062\013\044\014\053\015\047" +
    "\016\061\025\051\001\001\000\002\001\001\000\020\006" +
    "\136\012\062\013\044\014\053\015\047\016\061\025\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\353\012\062\013" +
    "\044\014\053\015\047\016\061\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\361\012\062\013\044" +
    "\014\053\015\047\016\061\025\051\027\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\366\012\062" +
    "\013\044\014\053\015\047\016\061\025\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\u0106\012\062\013\044\014" +
    "\053\015\047\016\061\025\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u0137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= R_PROGRAM lista_instr R_ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= mostrar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= console_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= console_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= graficacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= graficacionPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= graficacionLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= histograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mostrar ::= R_MOSTRAR PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.mostrar(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mostrar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Double)a + (Double)b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Double)a * (Double)b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.obtenerValor(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= IDENTIFICADOR_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.obtenerValor(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= suma 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= resta 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= multi 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= division 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= modulo 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= estadistica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_string ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_string ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.obtenerValor(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // suma ::= R_SUM PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.sumar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suma",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // resta ::= R_RES PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.restar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resta",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multi ::= R_MUL PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.multiplicar(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // division ::= R_DIV PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.dividir(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("division",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // modulo ::= R_MOD PARENTESIS_A expresion COMMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.modular(a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modulo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= R_VAR COLLON R_DOUBLE DOUBLE_COLLON IDENTIFICADOR ASIGNACION expresion FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararDouble(nombreVariable.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= R_VAR COLLON R_CHAR DOUBLE_COLLON IDENTIFICADOR ASIGNACION CADENA FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararCadena(nombreVariable.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= IDENTIFICADOR ASIGNACION expresion FIN_DECLARACION 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.asignarValor(nombreVariable.toString(), valor.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_arreglo ::= R_ARR_DOUBLE IDENTIFICADOR_ARREGLO ASIGNACION LISTA_VALORES FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreArreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloDouble(nombreArreglo.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_arreglo ::= R_ARR_CHAR IDENTIFICADOR_ARREGLO ASIGNACION LISTA_VALORES FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombreArreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.declararArregloChar(nombreArreglo.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estadistica ::= R_MEDIA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.media(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estadistica ::= R_MEDIANA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.mediana(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estadistica ::= R_MODA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.moda(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estadistica ::= R_VARIANZA PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.varianza(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estadistica ::= R_MAX PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.maximo(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estadistica ::= R_MIN PARENTESIS_A LISTA_VALORES PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.minimo(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estadistica ::= R_MEDIA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.media("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estadistica ::= R_MEDIANA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.mediana("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // estadistica ::= R_MODA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.moda("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // estadistica ::= R_VARIANZA PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.varianza("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estadistica ::= R_MAX PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.maximo("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estadistica ::= R_MIN PARENTESIS_A IDENTIFICADOR_ARREGLO PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.minimo("@" + val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_expresiones ::= lista_expresiones COMMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + ", " + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // console_print ::= R_CONSOLE DOUBLE_COLLON R_PRINT IGUAL lista_expresiones FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimir(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_print",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // console_column ::= R_CONSOLE DOUBLE_COLLON R_COLUMN IGUAL exp_string FLECHA IDENTIFICADOR_ARREGLO FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimirColumna(titulo.toString(), "@" + valores.toString().substring(0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_column",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // console_column ::= R_CONSOLE DOUBLE_COLLON R_COLUMN IGUAL exp_string FLECHA LISTA_VALORES FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.imprimirColumna(titulo.toString(), valores.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_column",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // graficacion ::= GRAPHBAR PARENTESIS_A TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EJEX DOUBLE_COLLON R_CHAR IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA EJEY DOUBLE_COLLON R_DOUBLE IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA TITULOX DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA TITULOY DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EXEC_GRAPHBAR FIN_DECLARACION PUNTOYCOMA PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-36)).value;
		int valores1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).left;
		int valores1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).right;
		String valores1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-29)).value;
		int valores2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int valores2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String valores2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int tituloCXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int tituloCXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object tituloCX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int tituloCYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tituloCYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tituloCY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarBarra(titulo.toString(), valores1.toString(), valores2.toString(), tituloCX.toString(), tituloCY.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // graficacionPie ::= GRAPHPIE PARENTESIS_A LABEL DOUBLE_COLLON R_CHAR IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA VALUES DOUBLE_COLLON R_DOUBLE IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EXEC_GRAPHPIE FIN_DECLARACION PUNTOYCOMA PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int valores1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int valores1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String valores1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int valores2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int valores2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String valores2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarPie(titulo.toString(), valores1.toString(), valores2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficacionPie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // graficacionLine ::= GRAPHLINE PARENTESIS_A TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EJEX DOUBLE_COLLON R_CHAR IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA EJEY DOUBLE_COLLON R_DOUBLE IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA TITULOX DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA TITULOY DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EXEC_GRAPHLINE FIN_DECLARACION PUNTOYCOMA PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-36)).value;
		int valores1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).left;
		int valores1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).right;
		String valores1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-29)).value;
		int valores2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int valores2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String valores2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int tituloCXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int tituloCXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object tituloCX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int tituloCYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tituloCYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tituloCY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarLinea(titulo.toString(), valores1.toString(), valores2.toString(), tituloCX.toString(), tituloCY.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficacionLine",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // graficacionLine ::= GRAPHLINE PARENTESIS_A TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EJEX DOUBLE_COLLON R_CHAR IGUAL IDENTIFICADOR_ARREGLO FIN_DECLARACION PUNTOYCOMA EJEY DOUBLE_COLLON R_DOUBLE IGUAL IDENTIFICADOR_ARREGLO FIN_DECLARACION PUNTOYCOMA TITULOX DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA TITULOY DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA EXEC_GRAPHLINE FIN_DECLARACION PUNTOYCOMA PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-36)).value;
		int valores1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).left;
		int valores1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).right;
		String valores1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-29)).value;
		int valores2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int valores2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String valores2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int tituloCXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int tituloCXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object tituloCX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int tituloCYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tituloCYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tituloCY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarLinea(titulo.toString(), valores1.toString(), "@" + valores2.toString(), tituloCX.toString(), tituloCY.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficacionLine",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // histograma ::= HISTOGRAM PARENTESIS_A TITULO DOUBLE_COLLON R_CHAR IGUAL exp_string FIN_DECLARACION PUNTOYCOMA VALUES DOUBLE_COLLON R_DOUBLE IGUAL LISTA_VALORES FIN_DECLARACION PUNTOYCOMA EXEC_HISTOGRAM FIN_DECLARACION PUNTOYCOMA PARENTESIS_C FIN_DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 codigo.Parser.resultado = codigo.Parser.resultado + func.Funcion.graficarhistograma(titulo.toString(), valores.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("histograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
